// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: insert.proto

#include "insert.pb.h"
#include "insert.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* InsertWord_method_names[] = {
  "/InsertWord/ListWords",
  "/InsertWord/InsertCount",
};

std::unique_ptr< InsertWord::Stub> InsertWord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InsertWord::Stub> stub(new InsertWord::Stub(channel, options));
  return stub;
}

InsertWord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListWords_(InsertWord_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_InsertCount_(InsertWord_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::WordResponse>* InsertWord::Stub::ListWordsRaw(::grpc::ClientContext* context, const ::WordRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::WordResponse>::Create(channel_.get(), rpcmethod_ListWords_, context, request);
}

void InsertWord::Stub::async::ListWords(::grpc::ClientContext* context, const ::WordRequest* request, ::grpc::ClientReadReactor< ::WordResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::WordResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListWords_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::WordResponse>* InsertWord::Stub::AsyncListWordsRaw(::grpc::ClientContext* context, const ::WordRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::WordResponse>::Create(channel_.get(), cq, rpcmethod_ListWords_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::WordResponse>* InsertWord::Stub::PrepareAsyncListWordsRaw(::grpc::ClientContext* context, const ::WordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::WordResponse>::Create(channel_.get(), cq, rpcmethod_ListWords_, context, request, false, nullptr);
}

::grpc::Status InsertWord::Stub::InsertCount(::grpc::ClientContext* context, const ::WordRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::WordRequest, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertCount_, context, request, response);
}

void InsertWord::Stub::async::InsertCount(::grpc::ClientContext* context, const ::WordRequest* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::WordRequest, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertCount_, context, request, response, std::move(f));
}

void InsertWord::Stub::async::InsertCount(::grpc::ClientContext* context, const ::WordRequest* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* InsertWord::Stub::PrepareAsyncInsertCountRaw(::grpc::ClientContext* context, const ::WordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::WordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* InsertWord::Stub::AsyncInsertCountRaw(::grpc::ClientContext* context, const ::WordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

InsertWord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InsertWord_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InsertWord::Service, ::WordRequest, ::WordResponse>(
          [](InsertWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::WordRequest* req,
             ::grpc::ServerWriter<::WordResponse>* writer) {
               return service->ListWords(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InsertWord_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InsertWord::Service, ::WordRequest, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InsertWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::WordRequest* req,
             ::Empty* resp) {
               return service->InsertCount(ctx, req, resp);
             }, this)));
}

InsertWord::Service::~Service() {
}

::grpc::Status InsertWord::Service::ListWords(::grpc::ServerContext* context, const ::WordRequest* request, ::grpc::ServerWriter< ::WordResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InsertWord::Service::InsertCount(::grpc::ServerContext* context, const ::WordRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


